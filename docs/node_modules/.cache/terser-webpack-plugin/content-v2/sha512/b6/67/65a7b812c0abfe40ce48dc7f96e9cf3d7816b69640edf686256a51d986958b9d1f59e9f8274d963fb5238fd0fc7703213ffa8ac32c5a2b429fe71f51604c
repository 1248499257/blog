{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{219:function(t,T,v){t.exports=v.p+\"assets/img/HTTP2_1.611a1e5e.png\"},220:function(t,T,v){t.exports=v.p+\"assets/img/HTTP2_2.16d6d6a4.png\"},242:function(t,T,v){\"use strict\";v.r(T);var _=v(0),r=Object(_.a)({},(function(){var t=this,T=t.$createElement,_=t._self._c||T;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[_(\"h1\",{attrs:{id:\"http-2-和-http-3\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-2-和-http-3\"}},[t._v(\"#\")]),t._v(\" HTTP/2 和 HTTP/3\")]),t._v(\" \"),_(\"h2\",{attrs:{id:\"简介\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介\"}},[t._v(\"#\")]),t._v(\" 简介\")]),t._v(\" \"),_(\"p\",[t._v(\"HTTP/2 很好的解决了当下常用的 HTTP/1 所存在的一些吸能问题，只需要升级到该协议就可以减少很多之前需要做的优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。\")]),t._v(\" \"),_(\"p\",[t._v(\"虽然HTTP/2已经解决了很多问题，但是不代表它已经是完美的了，HTTP/3 就是为了解决HTTP/2所存在的一些问题被推出来的。\")]),t._v(\" \"),_(\"h2\",{attrs:{id:\"http2\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http2\"}},[t._v(\"#\")]),t._v(\" HTTP2\")]),t._v(\" \"),_(\"p\",[t._v(\"HTTP/ 2相比于 HTTP/1，可以说是大幅度提高了网页的性能。\")]),t._v(\" \"),_(\"p\",[t._v(\"在HTTP/1中，为了性能考虑，我们会\"),_(\"strong\",[t._v(\"引入雪碧图、将小图内联、使用多个域名\")]),t._v(\"等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量（Chrome 下一般是限制六个连接），当页面中需要请求很多资源的时候，\"),_(\"strong\",[t._v(\"队头阻塞\")]),t._v(\" 会导致在达到最大请求数量时，剩余的资源要等到其他资源请求完成后才能发起请求。\")]),t._v(\" \"),_(\"p\",[t._v(\"那么在HTTP/2中便引用了\"),_(\"strong\",[t._v(\"多路复用\")]),t._v(\"的技术，这个技术可以只通过一个TCP连接就可以传输所有的请求数据。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时可间接更容易实现全速传输，毕竟新开一个TCP连接都需要慢慢提升传输速度。\")]),t._v(\" \"),_(\"p\",[t._v(\"大家可以通过  \"),_(\"a\",{attrs:{href:\"https://http2.akamai.com/demo\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"点我\"),_(\"OutboundLink\")],1),t._v(\" 感受一下 HTTP/2 比 HTTP/1 到底快了多少。大家可以仔细观察一下TCP连接请求！\")]),t._v(\" \"),_(\"div\",{attrs:{align:\"center\"}},[_(\"img\",{attrs:{src:v(219)}})]),t._v(\" \"),_(\"h3\",{attrs:{id:\"http-2-的特点\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-2-的特点\"}},[t._v(\"#\")]),t._v(\" HTTP/2 的特点\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"二进制传输\")])])]),t._v(\" \"),_(\"p\",[t._v(\"HTTP/2中所有加强性能的核心点在于此。在之前的HTTP版本中，我们都是通过文本的方式传输数据的。在HTTP/2中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制的格式编码。\")]),t._v(\" \"),_(\"div\",{attrs:{align:\"center\"}},[_(\"img\",{attrs:{src:v(220)}})]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"多路复用\")])])]),t._v(\" \"),_(\"p\",[t._v(\"在HTTP/2中，有两个非常重要的概念，分别是 帧（frame） 和 流（streat）。            帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。            多路复用，也就是在一个TCP连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免HTTP旧版本中的队头阻塞问题，极大的提高传输性能。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"Header压缩\")])])]),t._v(\" \"),_(\"p\",[t._v(\"在HTTP/1中，我们使用文本的性是传输 header，在header 携带 cookie的情况下，可能每次都需要重复传输几百到几千的字节。            在HTTP/2中，使用了 HPACK 压缩格式 对传输的header 进行编码，减少了header的大小。并在两端维护了索引表，用于记录出现过的header，后面传输过程中就可以传输已经记录过的 hedaer的键名，对端收到数据后就可以通过键名找到对应的值。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"服务端Push\")])])]),t._v(\" \"),_(\"p\",[t._v(\"在HTTP/2中，服务端可以在客户端某个请求后，主动推送其他资源。\")]),t._v(\" \"),_(\"p\",[t._v(\"可以想象一下情况，某些资源客户端时一定会请求的，这时就可以采取服务端push的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下，你可以用prefetch。\")]),t._v(\" \"),_(\"h2\",{attrs:{id:\"http-3\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-3\"}},[t._v(\"#\")]),t._v(\" HTTP/3\")]),t._v(\" \"),_(\"p\",[t._v(\"虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，虽然这个问题并不是它本身造成的，而是底层支撑的 TCP 协议的问题。\")]),t._v(\" \"),_(\"p\",[t._v(\"因为 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。\")]),t._v(\" \"),_(\"p\",[t._v(\"因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。\")]),t._v(\" \"),_(\"p\",[t._v(\"那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。\")]),t._v(\" \"),_(\"p\",[t._v(\"基于这个原因，Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上，当然 HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC，接下来我们就来学习关于这个协议的内容。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"QUIC\")])])]),t._v(\" \"),_(\"p\",[t._v(\"之前我们学习过 UDP 协议的内容，知道这个协议虽然效率很高，但是并不是那么的可靠。QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，比如多路复用、0-RTT、使用 TLS1.3 加密、流量控制、有序交付、重传等等功能。这里我们就挑选几个重要的功能学习下这个协议的内容。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"多路复用\")])])]),t._v(\" \"),_(\"p\",[t._v(\"虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。\")]),t._v(\" \"),_(\"p\",[t._v(\"并且 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"0-RTT\")])])]),t._v(\" \"),_(\"p\",[t._v(\"通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。\")]),t._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[t._v(\"纠错机制\")])])]),t._v(\" \"),_(\"ol\",[_(\"li\",[_(\"p\",[t._v(\"假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。\")])]),t._v(\" \"),_(\"li\",[_(\"p\",[t._v(\"当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。\")])])])])}),[],!1,null,null,null);T.default=r.exports}}]);","extractedComments":[]}